#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('frontend:server')
var http = require('http')
var https = require('https')
var fs = require('fs')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)
console.log(__dirname)
console.log(process.cwd())
// console.log(require('./ssl/key.pem'))

/**
 * Create HTTP server.
 */
 var options = {
   key  : fs.readFileSync(__dirname + '/ssl/key.pem'),
   ca   : fs.readFileSync(__dirname + '/ssl/csr.pem'),
   cert : fs.readFileSync(__dirname + '/ssl/cert.pem')
 }

var server = https.createServer(options, app)

/**
 * Listen on provided port, on all network interfaces.
 */
console.log(__dirname)
console.log(process.cwd())
// server.listen(port)
// server.on('error', onError)
// server.on('listening', onListening)


server.listen(3000, function() {
  console.log('Server listening on port %d in %s mode', this.address().port, app.settings.env)
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges')
    process.exit(1)
    break
  case 'EADDRINUSE':
    console.error(bind + ' is already in use')
    process.exit(1)
    break
  default:
    throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}



 // Twilio Credentials
var accountSid = 'AC23bee3a9f6af48eeda733ecfb34350d4';
var authToken = 'd19a432667c8bf2df19224b3e3e875ba';

//require the Twilio module and create a REST client
var client = require('twilio')(accountSid, authToken);

  const galvLat = 37.787601;
  const galvLon = -122.396643;
//
// // 10.3.32.64
// app.get('/sendText', (req, res) => {
//     const { phoneNumber } = req.query;
//     console.log(phoneNumber);
//     const merchId = 'RCTST0000008099';
    // const body = `please authorize your transaction by visiting ${process.env.AUTH_URL || 'https://localhost:3000'}/?phoneNumber=${phoneNumber}&merchantId=${merchId}&lat=${galvLat}&lon=${galvLon}`;
//     client.messages.create({
//         from: "+18562194031",
//         to: phoneNumber,
//         body
//     }, function(err, message) {
//         console.log(err)
//         console.log(message);
//     });
// });

//
//
// var admin = require("firebase-admin");
//
// var fs = require('fs');
// var serviceAccount = fs.readFileSync(__dirname + "/serviceKey.json");
//
// admin.initializeApp({
//   credential: admin.credential.cert(require('./serviceKey.json')),//serviceAccount),
//   databaseURL: "https://asdfasda-4bc1f.firebaseio.com"
// });
//
//
// var db = admin.database();
// const users = db.ref('/users');
// //
// // app.get('/validate', (req,res) => {
// //     const { phoneNumber, auth } = req.query;
// //     console.log("validate is called")
// //     users.child(4158329522).once('value', (s) => {
// //         const {authenticationState} = s.val();
// //         users.child(4158329522).set({authenticationState : auth ? 'AUTHENTICATED' : 'FAILED'});
// //     });
// // })
//
// module.exports = {
//     validate: function(req) {
//       console.log("VALIDATING")
//       const { auth } = req.query;
//       console.log("validate is called")
//       users.child(4158329522).once('value', (s) => {
//           const {authenticationState} = s.val();
//           users.child(4158329522).set({authenticationState : auth ? 'AUTHENTICATED' : 'FAILED'});
//       });
//   }
// }

// users.child('4158329522').on('value', (s) => {
//     console.log('WORKING')
//     const val = s.val();
//     const phoneNumber = 4158329522
//     if(val.authenticationState === 'PENDING') {
//         const merchId = 'RCTST0000008099';
//         const body = `please authorize your transaction by visiting ${process.env.AUTH_URL || 'https://10.3.32.64:3000'}/?phoneNumber=${phoneNumber}&merchantId=${merchId}&lat=${galvLat}&lon=${galvLon}`;
//         client.messages.create({
//             from: "+18562194031",
//             to: phoneNumber,
//             body
//         }, function(err, message) {
//             console.log(err)
//             console.log(message);
//         });
//     }
// })
